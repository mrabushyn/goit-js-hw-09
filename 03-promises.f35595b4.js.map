{"mappings":"AAAA,MAAMA,EAAQC,SAASC,cAAc,SAC/BC,EAAaF,SAASC,cAAc,qBACpCE,EAAYH,SAASC,cAAc,oBAEnCG,GADSJ,SAASC,cAAc,sBACbD,SAASC,cAAc,WAUhD,SAASI,EAAYC,GACnBA,EAAMC,iBAmBR,SAASC,EAASC,GAChBC,QAAQC,IAAIF,GAGd,SAASG,EAAQC,GACfH,QAAQC,IAAIE,GAhCZH,QAAQC,IAAIT,EAAWY,QAAQC,OAC/BL,QAAQC,IAAIR,EAAUa,aAGxBZ,EAAiBa,iBAAiB,QAASZ,GAC3CN,EAAMkB,iBAAiB,QAASZ,GA8BhC,MAAMa,EAAaC,aAAY,KAtB/B,IAAuBC,EAAUC,GAAVD,EAuBP,EAvBiBC,EAuBdnB,EAtBV,IAAIoB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAyB,UAAGH,KAE5BI,EAAO,YAERH,OAawBQ,KAAKrB,GAAUsB,MAAMlB,KACjDT,GAQH4B,cAAcb","sources":["src/js/03-promises.js"],"sourcesContent":["const input = document.querySelector('input');\nconst firstDelay = document.querySelector('input[name=delay]');\nconst delayStep = document.querySelector('input[name=step]');\nconst amount = document.querySelector('input[name=amount]');\nconst BtnCreatePromise = document.querySelector('button');\n\n\n  console.log(firstDelay.dataset.value);\n  console.log(delayStep.textContent);\n\n  \nBtnCreatePromise.addEventListener('click', onSubmitBtn);\ninput.addEventListener('input', onSubmitBtn);\n\nfunction onSubmitBtn(event) {\n  event.preventDefault();\n\n\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve('esssss' + ' ' + `${position}`);\n      } else {\n        reject('nooooo');\n      }\n    }, delay);\n  });\n}\n\nfunction onSecces(result) {\n  console.log(result);\n}\n\nfunction onError(error) {\n  console.log(error);\n}\n\nconst intervalId = setInterval(() => {\n  createPromise(2, firstDelay).then(onSecces).catch(onError);\n}, delayStep);\n\n// console.log(event);\n// const totalTime =\n//   (firstDelay.textContent + delayStep.textContent) * amount.textContent;\n// console.log(firstDelay.textContent);\n// console.log(totalTime);\n\nclearInterval(intervalId);\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     console.log(`Fetching data for ${username}`);\n\n//     setTimeout(() => {\n//       // Change value of isSuccess variable to simulate request status\n//       const isSuccess = false;\n\n//       if (isSuccess) {\n//         resolve('success value');\n//       } else {\n//         reject('Errrrror');\n//       }\n//     }, 2000);\n//   });\n// };\n//     console.log(Promise);\n\n// fetchUserFromServer('Mango')\n//   .then(o => console.log(o))\n//   .catch(er => console.log(er));\n\n// function onSecces (result) {\n// console.log(\"Allright\")\n// }\n\n// function onError (error) {\n//   console.log(\"Error\")\n// }\n\n// const makePromise = (text, delay) => {\n//   return new Promise(resolve => {\n//     setTimeout(() => resolve(text), delay);\n//   });\n// };\n\n// const promiseA = makePromise('promiseA value', 3000);\n// const promiseB = makePromise('promiseB value', 3000);\n\n// Promise.race([promiseA, promiseB])\n//   .then(value => console.log(value)) // \"promiseA value\"\n//   .catch(error => console.log(error));\n"],"names":["$47d4ff9957288465$var$input","document","querySelector","$47d4ff9957288465$var$firstDelay","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$BtnCreatePromise","$47d4ff9957288465$var$onSubmitBtn","event","preventDefault","$47d4ff9957288465$var$onSecces","result","console","log","$47d4ff9957288465$var$onError","error","dataset","value","textContent","addEventListener","$47d4ff9957288465$var$intervalId","setInterval","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","catch","clearInterval"],"version":3,"file":"03-promises.f35595b4.js.map"}